// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// B is an autogenerated mock type for the B type
type B struct {
	mock.Mock
}

type B_Expecter struct {
	mock *mock.Mock
}

func (_m *B) EXPECT() *B_Expecter {
	return &B_Expecter{mock: &_m.Mock}
}

// FuncA provides a mock function with given fields:
func (_m *B) FuncA() {
	_m.Called()
}

// B_FuncA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FuncA'
type B_FuncA_Call struct {
	*mock.Call
}

// FuncA is a helper method to define mock.On call
func (_e *B_Expecter) FuncA() *B_FuncA_Call {
	return &B_FuncA_Call{Call: _e.mock.On("FuncA")}
}

func (_c *B_FuncA_Call) Run(run func()) *B_FuncA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *B_FuncA_Call) Return() *B_FuncA_Call {
	_c.Call.Return()
	return _c
}

func (_c *B_FuncA_Call) RunAndReturn(run func()) *B_FuncA_Call {
	_c.Call.Return(run)
	return _c
}

// FuncB provides a mock function with given fields:
func (_m *B) FuncB() {
	_m.Called()
}

// B_FuncB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FuncB'
type B_FuncB_Call struct {
	*mock.Call
}

// FuncB is a helper method to define mock.On call
func (_e *B_Expecter) FuncB() *B_FuncB_Call {
	return &B_FuncB_Call{Call: _e.mock.On("FuncB")}
}

func (_c *B_FuncB_Call) Run(run func()) *B_FuncB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *B_FuncB_Call) Return() *B_FuncB_Call {
	_c.Call.Return()
	return _c
}

func (_c *B_FuncB_Call) RunAndReturn(run func()) *B_FuncB_Call {
	_c.Call.Return(run)
	return _c
}

// NewB creates a new instance of B. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewB(t interface {
	mock.TestingT
	Cleanup(func())
}) *B {
	mock := &B{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
