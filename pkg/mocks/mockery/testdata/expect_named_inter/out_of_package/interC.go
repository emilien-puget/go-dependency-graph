// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// InterC is an autogenerated mock type for the interC type
type InterC struct {
	mock.Mock
}

type InterC_Expecter struct {
	mock *mock.Mock
}

func (_m *InterC) EXPECT() *InterC_Expecter {
	return &InterC_Expecter{mock: &_m.Mock}
}

// FuncA provides a mock function with given fields:
func (_m *InterC) FuncA() {
	_m.Called()
}

// InterC_FuncA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FuncA'
type InterC_FuncA_Call struct {
	*mock.Call
}

// FuncA is a helper method to define mock.On call
func (_e *InterC_Expecter) FuncA() *InterC_FuncA_Call {
	return &InterC_FuncA_Call{Call: _e.mock.On("FuncA")}
}

func (_c *InterC_FuncA_Call) Run(run func()) *InterC_FuncA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterC_FuncA_Call) Return() *InterC_FuncA_Call {
	_c.Call.Return()
	return _c
}

func (_c *InterC_FuncA_Call) RunAndReturn(run func()) *InterC_FuncA_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterC creates a new instance of InterC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterC(t interface {
	mock.TestingT
	Cleanup(func())
}) *InterC {
	mock := &InterC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
