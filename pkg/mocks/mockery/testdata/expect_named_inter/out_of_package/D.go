// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// D is an autogenerated mock type for the D type
type D struct {
	mock.Mock
}

type D_Expecter struct {
	mock *mock.Mock
}

func (_m *D) EXPECT() *D_Expecter {
	return &D_Expecter{mock: &_m.Mock}
}

// FuncA provides a mock function with given fields:
func (_m *D) FuncA() {
	_m.Called()
}

// D_FuncA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FuncA'
type D_FuncA_Call struct {
	*mock.Call
}

// FuncA is a helper method to define mock.On call
func (_e *D_Expecter) FuncA() *D_FuncA_Call {
	return &D_FuncA_Call{Call: _e.mock.On("FuncA")}
}

func (_c *D_FuncA_Call) Run(run func()) *D_FuncA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *D_FuncA_Call) Return() *D_FuncA_Call {
	_c.Call.Return()
	return _c
}

func (_c *D_FuncA_Call) RunAndReturn(run func()) *D_FuncA_Call {
	_c.Call.Return(run)
	return _c
}

// NewD creates a new instance of D. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewD(t interface {
	mock.TestingT
	Cleanup(func())
}) *D {
	mock := &D{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
