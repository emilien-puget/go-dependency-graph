// Code generated by mockery. DO NOT EDIT.

package pa_test

import mock "github.com/stretchr/testify/mock"

// PaA is an autogenerated mock type for the paA type
type PaA struct {
	mock.Mock
}

type PaA_Expecter struct {
	mock *mock.Mock
}

func (_m *PaA) EXPECT() *PaA_Expecter {
	return &PaA_Expecter{mock: &_m.Mock}
}

// FuncFoo provides a mock function with given fields: foo
func (_m *PaA) FuncFoo(foo string) (int, error) {
	ret := _m.Called(foo)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(foo)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(foo)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(foo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaA_FuncFoo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FuncFoo'
type PaA_FuncFoo_Call struct {
	*mock.Call
}

// FuncFoo is a helper method to define mock.On call
//   - foo string
func (_e *PaA_Expecter) FuncFoo(foo interface{}) *PaA_FuncFoo_Call {
	return &PaA_FuncFoo_Call{Call: _e.mock.On("FuncFoo", foo)}
}

func (_c *PaA_FuncFoo_Call) Run(run func(foo string)) *PaA_FuncFoo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PaA_FuncFoo_Call) Return(bar int, err error) *PaA_FuncFoo_Call {
	_c.Call.Return(bar, err)
	return _c
}

func (_c *PaA_FuncFoo_Call) RunAndReturn(run func(string) (int, error)) *PaA_FuncFoo_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaA creates a new instance of PaA. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaA(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaA {
	mock := &PaA{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
